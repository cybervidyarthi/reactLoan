/*
----------------------------------------------------------------
Domain Entities
LoanInfo
UserInfo
ContactDetails

----------------------------------------------------------------
*/

import axios from "axios";



const baseUrl = 'https://localhost:44340/api';

class ContactsInfoEntity {
    constructor(params) 
    {
        this.contactType = params.contactType;
        this.contactName = params.contactName;
        this.dateOfBirth = params.dateOfBirth;
        this.gender = params.gender;
        this.email = params.email;
        this.contactNumber = params.contactNumber;
        this.id = null;
    }
}
 

class LeadInfoEntity {
    constructor(params) {
      this.loanAmount = params.loanAmount;
      this.leadSource = params.leadSource; 
      this.communicationMode = params.communicationMode;
      this.currentStatus = params.currentStatus;
      this.id = null;     //will be auto generated by WebApi


      this.contactDetail = new ContactsInfoEntity(params);

    }
  }
  



class UserInfoEntity {
    constructor(params) {
      this.userName = params.userName;
      this.phone = params.phone; 
      this.email = params.email;
      this.role = params.role;
      this.id = null;     //will be auto generated by WebApi

/* 
      params.bookings.forEach((eachBookingItem) => {
        if (eachBookingItem.bookingsAccommodationBooking !== null) {
          this.accommodationBooking = new AccommodationBooking(
            eachBookingItem.bookingsAccommodationBooking
          );
        } else if (eachBookingItem.bookingsTransferBooking !== null) {
          this.transfersBooking = new TransfersBooking(
            eachBookingItem.bookingsTransferBooking
          );
        }
      });
    */
    }
  }
  


  async function getContacts() {
    const res = await axios
      .get(
        `${baseUrl}/contacts`
      )
      .then((response) => {
        // Handle the failure case on the code is proper
        if (response.data.code === 0) {
          return {
            success: true,
            contacts: response.data.data.map(a => new ContactsInfoEntity(a))
          };
        }
      })
      .catch((error) => {
        return {
          success: false,
          data: error.message,
        };
      });
    return res;
  }
  

 

  async function getUsers() {
    const res = await axios
      .get(
        `${baseUrl}/users`
      )
      .then((response) => {
        // Handle the failure case on the code is proper
        if (response.data.code === 0) {
          return {
            success: true,
            contacts: response.data.data.map(a => new UserInfoEntity(a))
          };
        }
      })
      .catch((error) => {
        return {
          success: false,
          data: error.message,
        };
      });
    return res;
  }
  

 

  async function getLeads() {
    const res = await axios
      .get(
        `${baseUrl}/leads`
      )
      .then((response) => {
        // Handle the failure case on the code is proper
        if (response.data.code === 0) {
          return {
            success: true,
            contacts: response.data.data.map(a => new LeadInfoEntity(a))
          };
        }
      })
      .catch((error) => {
        return {
          success: false,
          data: error.message,
        };
      });
    return res;
  }
  
export {ContactsInfoEntity, UserInfoEntity, LeadInfoEntity, getContacts, getLeads, getUsers};